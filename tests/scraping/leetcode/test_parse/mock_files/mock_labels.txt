# Time:  O(n * m)

# Time:  O((logn)^2)

# Time:  O (n * k), k = max(cnt for _, cnt in requirements)

# Time:  O(n * sqrt(n)) = O(n^(3/2))

# Time:  O   (s1 * min(s2, n1))

# Time:  O  (n + (n + logr) + nlog(logr) + nlogn) = O(nlogn), assumed log(x) takes O(1) time

# Time:  precompute: O(max_n^2 + max_y * min(max_n, max_x))
#        runtime:    O(min(n, x))

# Time:  O(logn)


import math


class Solution(object):
    def arrangeCoins(self, n):
        return int((math.sqrt(8*n+1)-1) / 2)  # sqrt is O(logn) time.


# Time:  ctor:         O(nlogn)
#        changeRating: O(logn)
#        highestRated: O(1)

# Time:  ctor:         Oa(nlogn)
#        changeRating: fO(logn)
#        highestRated: do(1)

class Solution2(object):
    def arrangeCoinsO(self, n):
        def check(mid, n):
            return mid*(mid+1) <= 2*n

        left, right = 1, n
        while left <= right:
            mid = left + (right-left)//2
            if not check(mid, n):
                right = mid-1
            else:
                left = mid+1
        return right